// <auto-generated />
using System;
using HastaneOtomasyonu.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HastaneOtomasyonu.Migrations
{
    [DbContext(typeof(HastanaDbContext))]
    partial class HastanaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("HastaneOtomasyonu.Models.Doktor", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<int>("hastaneKlinikId")
                        .HasColumnType("integer");

                    b.Property<string>("unvan")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("hastaneKlinikId");

                    b.ToTable("Doktor");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Hasta", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("Hasta");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Hastane", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("adi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ilceId")
                        .HasColumnType("integer");

                    b.Property<string>("telefonNo")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("ilceId");

                    b.ToTable("Hastane");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.HastaneKlinik", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("hastaneId")
                        .HasColumnType("integer");

                    b.Property<int>("klinikId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("hastaneId");

                    b.HasIndex("klinikId");

                    b.ToTable("HastaneKlinik");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Ilac", b =>
                {
                    b.Property<string>("ilacKodu")
                        .HasColumnType("text");

                    b.Property<double>("fiyat")
                        .HasColumnType("double precision");

                    b.Property<string>("ilacAdi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ilacMarkasi")
                        .HasColumnType("text");

                    b.HasKey("ilacKodu");

                    b.ToTable("Ilac");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Ilce", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("adi")
                        .HasColumnType("text");

                    b.Property<int>("sehirId")
                        .HasColumnType("integer");

                    b.Property<int?>("telefonKodu")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("sehirId");

                    b.ToTable("Ilce");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.KanGrubu", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("adi")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("KanGrubu");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Kisi", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("TCNo")
                        .HasColumnType("text");

                    b.Property<string>("adi")
                        .HasColumnType("text");

                    b.Property<string>("adres")
                        .HasColumnType("text");

                    b.Property<string>("cepNo")
                        .HasColumnType("text");

                    b.Property<int>("cinsiyet")
                        .HasColumnType("integer");

                    b.Property<DateTime>("dogumTarihi")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("evNo")
                        .HasColumnType("text");

                    b.Property<string>("isNo")
                        .HasColumnType("text");

                    b.Property<int>("kanGrubuId")
                        .HasColumnType("integer");

                    b.Property<char>("kisiTuru")
                        .HasColumnType("character(1)");

                    b.Property<int>("medeniDurum")
                        .HasColumnType("integer");

                    b.Property<int>("sehirId")
                        .HasColumnType("integer");

                    b.Property<string>("soyadi")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("kanGrubuId");

                    b.HasIndex("sehirId");

                    b.ToTable("Kisi");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Klinik", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("adi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Klinik");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Muayene", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("tani")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Muayene");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.MuayeneTest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("muayeneId")
                        .HasColumnType("integer");

                    b.Property<int>("testId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("muayeneId");

                    b.HasIndex("testId");

                    b.ToTable("MuayeneTest");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Personel", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<int>("hastaneKlinikId")
                        .HasColumnType("integer");

                    b.Property<string>("pozisyon")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("hastaneKlinikId");

                    b.ToTable("Personel");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Randevu", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("doktorId")
                        .HasColumnType("integer");

                    b.Property<int>("hastaId")
                        .HasColumnType("integer");

                    b.Property<int>("hastaneKlinikId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("saat")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("doktorId");

                    b.HasIndex("hastaId");

                    b.HasIndex("hastaneKlinikId");

                    b.ToTable("Randevu");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Recete", b =>
                {
                    b.Property<string>("receteNo")
                        .HasColumnType("text");

                    b.Property<int>("muayeneId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("tarih")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("receteNo");

                    b.HasIndex("muayeneId");

                    b.ToTable("Recete");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.ReceteIlac", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ilacKodu")
                        .HasColumnType("text");

                    b.Property<string>("receteNo")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("ilacKodu");

                    b.HasIndex("receteNo");

                    b.ToTable("ReceteIlac");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Sehir", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("adi")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("plakaKodu")
                        .HasColumnType("integer");

                    b.Property<int?>("telefonKodu")
                        .HasColumnType("integer");

                    b.Property<int>("ulkeId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("ulkeId");

                    b.ToTable("Sehir");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Test", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("adi")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Ulke", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("adi")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ulkeKodu")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("Ulke");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Doktor", b =>
                {
                    b.HasOne("HastaneOtomasyonu.Models.HastaneKlinik", "hastaneKlinik")
                        .WithMany()
                        .HasForeignKey("hastaneKlinikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneOtomasyonu.Models.Kisi", "kisi")
                        .WithOne("Doktor")
                        .HasForeignKey("HastaneOtomasyonu.Models.Doktor", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Hasta", b =>
                {
                    b.HasOne("HastaneOtomasyonu.Models.Kisi", "kisi")
                        .WithOne("Hasta")
                        .HasForeignKey("HastaneOtomasyonu.Models.Hasta", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Hastane", b =>
                {
                    b.HasOne("HastaneOtomasyonu.Models.Ilce", "ilce")
                        .WithMany()
                        .HasForeignKey("ilceId");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.HastaneKlinik", b =>
                {
                    b.HasOne("HastaneOtomasyonu.Models.Hastane", "hastane")
                        .WithMany()
                        .HasForeignKey("hastaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneOtomasyonu.Models.Klinik", "klinik")
                        .WithMany()
                        .HasForeignKey("klinikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Ilce", b =>
                {
                    b.HasOne("HastaneOtomasyonu.Models.Sehir", "sehir")
                        .WithMany()
                        .HasForeignKey("sehirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Kisi", b =>
                {
                    b.HasOne("HastaneOtomasyonu.Models.KanGrubu", "kanGrubu")
                        .WithMany()
                        .HasForeignKey("kanGrubuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneOtomasyonu.Models.Sehir", "sehir")
                        .WithMany()
                        .HasForeignKey("sehirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Muayene", b =>
                {
                    b.HasOne("HastaneOtomasyonu.Models.Randevu", "randevu")
                        .WithOne("muayene")
                        .HasForeignKey("HastaneOtomasyonu.Models.Muayene", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.MuayeneTest", b =>
                {
                    b.HasOne("HastaneOtomasyonu.Models.Muayene", "muayene")
                        .WithMany()
                        .HasForeignKey("muayeneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneOtomasyonu.Models.Test", "test")
                        .WithMany()
                        .HasForeignKey("testId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Personel", b =>
                {
                    b.HasOne("HastaneOtomasyonu.Models.HastaneKlinik", "hastaneKlinik")
                        .WithMany()
                        .HasForeignKey("hastaneKlinikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneOtomasyonu.Models.Kisi", "kisi")
                        .WithOne("Personel")
                        .HasForeignKey("HastaneOtomasyonu.Models.Personel", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Randevu", b =>
                {
                    b.HasOne("HastaneOtomasyonu.Models.Doktor", "doktor")
                        .WithMany()
                        .HasForeignKey("doktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneOtomasyonu.Models.Hasta", "hasta")
                        .WithMany()
                        .HasForeignKey("hastaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneOtomasyonu.Models.HastaneKlinik", "hastaneKlinik")
                        .WithMany()
                        .HasForeignKey("hastaneKlinikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Recete", b =>
                {
                    b.HasOne("HastaneOtomasyonu.Models.Muayene", "muayene")
                        .WithMany()
                        .HasForeignKey("muayeneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.ReceteIlac", b =>
                {
                    b.HasOne("HastaneOtomasyonu.Models.Ilac", "ilac")
                        .WithMany()
                        .HasForeignKey("ilacKodu");

                    b.HasOne("HastaneOtomasyonu.Models.Recete", "recete")
                        .WithMany()
                        .HasForeignKey("receteNo");
                });

            modelBuilder.Entity("HastaneOtomasyonu.Models.Sehir", b =>
                {
                    b.HasOne("HastaneOtomasyonu.Models.Ulke", "ulke")
                        .WithMany()
                        .HasForeignKey("ulkeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
